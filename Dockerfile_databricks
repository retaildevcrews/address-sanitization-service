################################################################
# Stage 1: Build stage named 'libpostal-builder'
################################################################
FROM debian:bullseye-slim AS libpostal-builder

RUN apt-get update && apt-get install -y \
    build-essential automake autoconf libtool pkg-config git curl \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /opt/libpostal
RUN git clone https://github.com/openvenues/libpostal.git . && \
    ./bootstrap.sh && \
    ./configure --prefix=/usr/local/libpostal && \
    make && \
    make install && \
    ldconfig

################################################################
# Stage 2: Final stage uses Databricks Runtime (Python) 15.4-LTS
################################################################
FROM databricksruntime/python:15.4-LTS

# Must run as root in Databricks
USER root

# Copy only the compiled libpostal artifacts from the builder
COPY --from=libpostal-builder /usr/local/libpostal/bin/     /usr/local/bin/
COPY --from=libpostal-builder /usr/local/libpostal/lib/     /usr/local/lib/
COPY --from=libpostal-builder /usr/local/libpostal/include/ /usr/local/include/
COPY --from=libpostal-builder /usr/local/libpostal/share/   /usr/local/share/

RUN ldconfig

ENV LIBPOSTAL_DATA=/usr/local/share/libpostal

# Install extra system libraries
RUN apt-get update && apt-get install -y \
    libstdc++6 \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# **Install python3-pip** so we have pip
RUN apt-get update && \
    apt-get install -y python3-pip && \
    rm -rf /var/lib/apt/lists/*

# So we can update pip and install Poetry
RUN pip3 install --upgrade pip
RUN pip3 install poetry

# Set up your working directory
WORKDIR /app

# Copy dependency files
COPY pyproject.toml poetry.lock ./

# Install dependencies system-wide (no venv)
RUN poetry config virtualenvs.create false && \
    poetry install --no-root --no-interaction --no-ansi

# Copy your application code
COPY app/ ./app/

EXPOSE 80
# Do not override ENTRYPOINT/CMD
